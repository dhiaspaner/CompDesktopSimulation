[versions]
kotlin = "1.9.22"
ksp = "1.9.22-1.0.17"
compose = "1.6.0-beta02"
compose-tooling = "1.6.0"
agp = "8.2.0"

sqlDelight = "2.0.1"

android-compileSdk = "34"
android-minSdk = "24"
android-targetSdk = "34"

# Koin
koin = "3.5.3"
koin-compose = "1.1.2"
koin-annotations = "1.3.0"
stately = "2.0.5"

# Settings
multiplatform-settings = "1.1.1"

androidx-activityCompose = "1.8.2"
androidx-appcompat = "1.6.1"
androidx-core-ktx = "1.12.0"

softylines-plugin = "0.1.0"

voyager = "1.0.0"

ktor = "2.3.8"

uuid = "0.8.1"

kotlinx-coroutines = "1.7.3"
kotlinx-serialization-json = "1.6.2"
kotlinx-datetime = "0.5.0"
kotlinx-kover = "0.7.4"

coil = "3.0.0-alpha01"

calf = "0.3.0"

buildkonfig = "0.15.1"

konsist = "0.13.0"

sentry = "0.4.0"

detekt = "1.23.5"
compose-rules-detekt = "0.3.11"

firebaseCrashlyticsBuildtools = "2.9.9"

[libraries]
gradlePlugin-android = { module = "com.android.tools.build:gradle", version.ref = "agp" }
gradlePlugin-jetbrainsCompose = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose" }
gradlePlugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradlePlugin-detekt = {module = "io.gitlab.arturbosch.detekt:detekt-gradle-plugin", version.ref = "detekt"}

kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }

# Android
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core-ktx" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "androidx-appcompat" }
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose-tooling" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose-tooling" }

# Coroutines
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-coreJs = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-js", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-swing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }
# Serialization
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization-json" }

# DateTime
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# Voyager
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyager" }
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyager" }

# Ktor
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-serialization-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-engine-apache5 = { module = "io.ktor:ktor-client-apache5", version.ref = "ktor" }
ktor-engine-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-engine-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-engine-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-auth = {module = "io.ktor:ktor-client-auth", version.ref = "ktor"}
ktor-client-serialization = { module = "io.ktor:ktor-client-serialization", version.ref = "ktor" }
ktor-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor"}
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }


# Coil
coil-core = { module = "io.coil-kt.coil3:coil-core", version.ref = "coil" }
coil-network = { module = "io.coil-kt.coil3:coil-network", version.ref = "coil" }
coil-compose = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }

# Calf
calf-ui = { module = "com.mohamedrejeb.calf:calf-ui", version.ref = "calf" }
calf-permissions = { module = "com.mohamedrejeb.calf:calf-permissions", version.ref = "calf" }
calf-filepicker = { module = "com.mohamedrejeb.calf:calf-file-picker", version.ref = "calf" }

# UUID
uuid = { module = "com.benasher44:uuid", version.ref = "uuid" }

# Konsist
konsist = { module = "com.lemonappdev:konsist", version.ref = "konsist" }

# Koin
koin-core = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koin-androidx-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koin" }
koin-compose = { module = "io.insert-koin:koin-compose", version.ref = "koin-compose" }
koin-annotations = { module = "io.insert-koin:koin-annotations", version.ref = "koin-annotations" }
koin-ksp-compiler = { module = "io.insert-koin:koin-ksp-compiler", version.ref = "koin-annotations" }
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koin" }
stately = { module = "co.touchlab:stately-common", version.ref = "stately" }

# Multiplatform Settings
multiplatform-settings = { module = "com.russhwolf:multiplatform-settings", version.ref = "multiplatform-settings" }
multiplatform-settings-no-arg = { module = "com.russhwolf:multiplatform-settings-no-arg", version.ref = "multiplatform-settings" }
firebase-crashlytics-buildtools = { group = "com.google.firebase", name = "firebase-crashlytics-buildtools", version.ref = "firebaseCrashlyticsBuildtools" }

# SQLDelight
sqldelight-coroutinesExtensions = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqlDelight" }
sqldelight_sqliteDialect = { module = "app.cash.sqldelight:sqlite-3-24-dialect", version.ref = "sqlDelight" }
sqldelight-primitiveAdapters = { module = "app.cash.sqldelight:primitive-adapters", version.ref = "sqlDelight" }
sqldelight-runtime = { module = "app.cash.sqldelight:runtime", version.ref = "sqlDelight" }
sqldelight-sqliteDriver = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqlDelight" }
sqldelight-driver-android = { module = "app.cash.sqldelight:android-driver", version.ref = "sqlDelight" }
sqldelight-driver-native = { module = "app.cash.sqldelight:native-driver", version.ref = "sqlDelight" }

# Detekt Rules
detekt-formatting = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
detekt-compose-rules = { module = "io.nlopez.compose.rules:detekt", version.ref = "compose-rules-detekt" }

[plugins]
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
androidApplication = { id = "com.android.application", version.ref = "agp" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
androidLibrary = { id = "com.android.library", version.ref = "agp" }
jetbrainsCompose = { id = "org.jetbrains.compose", version.ref = "compose" }
kotlinAndroid = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
softylines = { id = "com.softylines.gradle.setup", version.ref = "softylines-plugin" }
buildkonfig = { id = "com.codingfeline.buildkonfig", version.ref = "buildkonfig" }
kotlinx-kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kotlinx-kover" }
sqldelight = { id = "app.cash.sqldelight", version.ref = "sqlDelight" }
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
detektCompiler = { id = "io.github.detekt.gradle.compiler-plugin", version.ref = "detekt" }

[bundles]
koin = [
    "koin-core",
    "koin-annotations",
    "koin-compose"
]
ktor = [
    "kotlinx-serialization-json",
    "ktor-content-negotiation",
    "ktor-serialization",
    "ktor-client-core",
    "ktor-client-serialization",
    "ktor-logging",
    "ktor-status-pages",
    "ktor-client-auth"
]


